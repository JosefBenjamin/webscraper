package app.controllers;

import app.entities.ScrapedData;
import app.services.ScrapeLoggerService;
import dk.bugelhartmann.UserDTO;
import io.javalin.http.Context;
import io.javalin.http.UnauthorizedResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

public class CrawlLogController {
    private static final Logger LOGGER = LoggerFactory.getLogger(CrawlLogController.class);
    private ScrapeLoggerService scrapeLoggerService;

    public CrawlLogController(ScrapeLoggerService scrapeLoggerService){
        this.scrapeLoggerService = scrapeLoggerService;
    }

    /**
     * What it does:
     * Creates a new row in the CrawlLogger table.
     * What gets written: source → the Source being crawled (foreign key)
     * user → the user who triggered the crawl
     * status → set to RUNNING
     * error → null (no error yet)
     * id → auto-generated by the database (primary key)
     * In short: it says “User X has started crawling Source Y”.
     */
    public void startCrawl(Context ctx) {
        //TODO: Starts a new crawl for the given source and logs it as “RUNNING” in the database
        UserDTO user = requireUser(ctx);
        Long sourceId = ctx.pathParamAsClass("sourceId", Long.class).get();

        Long logId = scrapeLoggerService.startRunning(sourceId, user.getUsername());
        LOGGER.info("User '{}' started crawl for sourceId={}, logId={}", user.getUsername(), sourceId, logId);
        ctx.status(201).json(
                java.util.Map.of("message", "Crawl started", "logId", logId)
        );
    }

    /**
    //TODO: Marks an existing crawl log as “SUCCESS” when the crawl finishes correctly
    public void markSuccess(Context ctx) {
        Long logId = ctx.pathParamAsClass("logId", Long.class).get();
        scrapeLoggerService.successLog(logId);
        LOGGER.info("Crawl log {} marked as SUCCESS", logId);
        ctx.status(200).json(java.util.Map.of("message", "Crawl marked as success"));
    }

    //TODO: Marks a crawl as “FAILED” and records the error message that caused it
    public void markFailed(Context ctx) {
        Long logId = ctx.pathParamAsClass("logId", Long.class).get();
        String error = ctx.body();
        scrapeLoggerService.failLog(logId, error);
        LOGGER.info("Crawl log {} marked as FAILED", logId);
        ctx.status(200).json(java.util.Map.of("message", "Crawl marked as failed"));
    }

    //TODO: Saves all the scraped data items from a crawl and links them to that crawl’s log entry
    public void attachItems(Context ctx) {
        Long logId = ctx.pathParamAsClass("logId", Long.class).get();
        List<ScrapedData> items = ctx.bodyAsClass(List.class); // requires a JSON array of items
        scrapeLoggerService.attachItems(logId, items);
        LOGGER.info("Attached {} items to crawl log {}", items.size(), logId);
        ctx.status(200).json(java.util.Map.of("message", "Items attached"));
    }

     */

    //TODO: Helps to find a valid user (if applicable) from a http request
    private UserDTO requireUser(Context ctx) {
        UserDTO user = ctx.attribute("user");
        if (user == null){
            throw new UnauthorizedResponse("Unauthorized");
        }
        return user;
    }




}
